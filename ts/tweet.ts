class Tweet {
	private text:string;
	time:Date;

	constructor(tweet_text:string, tweet_time:string) {
        this.text = tweet_text;
		this.time = new Date(tweet_time);//, "ddd MMM D HH:mm:ss Z YYYY"
	}

	//returns either 'live_event', 'achievement', 'completed_event', or 'miscellaneous'
    get source():string {
        //TODO: identify whether the source is a live event, an achievement, a completed event, or miscellaneous.
        const text = this.text.toLowerCase();
        if (text.startsWith("just completed") || text.startsWith("just posted")){
            return "completedTweet";
        }
        if (text.includes("watch my")){
            return "liveTweet"
        }
        if (text.startsWith("achieved a new personal record") || text.includes("set a goal")){
            return "achievementTweet"
        }
        return "miscellaneous";
    }

    //returns a boolean, whether the text includes any content written by the person tweeting.
    get written():boolean {
        //TODO: identify whether the tweet is written
        let userWrittenText = this.text;
        
        // Find non autogenerated text
        if (userWrittenText.startsWith("Just completed")){
            userWrittenText = userWrittenText.replace(/Just completed a .*? with @RunKeeper\. Check it out!/gi, "").trim();
        }
        if (userWrittenText.startsWith("Just posted")){
            userWrittenText = userWrittenText.replace(/Just posted a .*? with @RunKeeper\. Check it out!/gi, "").trim();
        }
        // Remove #s and URLs
        userWrittenText = userWrittenText.replace(/#RunKeeper/gi, "").replace(/http\S+/g, "").trim();
        
        if (userWrittenText.length > 0){
            return true;
        }
        return false;
    }

    get writtenText():string {
        if(!this.written) {
            return "";
        }
        //TODO: parse the written text from the tweet
        let writtenText = this.text;

        // Replace url with actual clickable link
        writtenText = writtenText.replace(/#RunKeeper/gi, "").replace(/http\S+/g, (url) => {
                return `<a href="${url}" target="_blank">${url}</a>`;
            }).trim();

        return writtenText;
    }
    

    get activityType():string {
        if (this.source != 'completed_event') {
            return "unknown";
        }
        //TODO: parse the activity type from the text of the tweet
        return "";
    }

    get distance():number {
        if(this.source != 'completed_event') {
            return 0;
        }
        //TODO: prase the distance from the text of the tweet
        return 0;
    }

    getHTMLTableRow(rowNumber:number):string {
        //TODO: return a table row which summarizes the tweet with a clickable link to the RunKeeper activity
        return "<tr></tr>";
    }
}